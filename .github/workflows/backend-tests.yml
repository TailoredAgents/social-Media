name: Backend Tests

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'backend/**'
      - 'requirements.txt'
      - 'pytest.ini'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'backend/**'
      - 'requirements.txt' 
      - 'pytest.ini'
      - '.github/workflows/backend-tests.yml'

defaults:
  run:
    working-directory: .

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_ai_social_media
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements.txt
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-benchmark pytest-mock pytest-httpx
        
    - name: Set up test environment variables
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_ai_social_media" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_github_actions" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "AUTH0_DOMAIN=test.auth0.com" >> $GITHUB_ENV
        echo "AUTH0_CLIENT_ID=test_client_id" >> $GITHUB_ENV
        echo "AUTH0_CLIENT_SECRET=test_client_secret" >> $GITHUB_ENV
        
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        
    - name: Wait for Redis
      run: |
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis to be ready..."
          sleep 2
        done
        
    - name: Run database migrations
      run: |
        python -c "
        from backend.db.database import engine, Base
        from backend.db.models import *
        Base.metadata.create_all(bind=engine)
        print('Database tables created successfully')
        "
        
    - name: Run unit tests
      run: |
        pytest backend/tests/unit/ \
          --verbose \
          --tb=short \
          --cov=backend \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=unit-test-results.xml \
          -n auto \
          --durations=10
          
    - name: Run integration tests
      run: |
        pytest backend/tests/integration/ \
          --verbose \
          --tb=short \
          --cov=backend \
          --cov-append \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=integration-test-results.xml \
          --durations=10
          
    - name: Run performance benchmarks
      run: |
        pytest backend/tests/performance/ \
          --verbose \
          --tb=short \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --benchmark-sort=mean \
          --benchmark-columns=min,max,mean,stddev \
          --junit-xml=performance-test-results.xml
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          unit-test-results.xml
          integration-test-results.xml
          performance-test-results.xml
          benchmark-results.json
        retention-days: 30
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: backend
        name: backend-coverage-python-${{ matrix.python-version }}
        fail_ci_if_error: false
        
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11'
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 7
        
    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        coverage = float(tree.getroot().attrib['line-rate']) * 100
        print(f'Coverage: {coverage:.1f}%')
        if coverage < 80.0:
          print('WARNING: Coverage below 80% threshold')
          exit(1)
        else:
          print('✅ Coverage meets 80% threshold')
        "
      continue-on-error: true

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run Black formatter check
      run: |
        echo "Running Black formatter check..."
        black --check --diff backend/
        if [ $? -eq 0 ]; then
          echo "✅ Black formatting check passed"
        else
          echo "❌ Black formatting check failed"
          exit 1
        fi
        
    - name: Run isort import sorting check
      run: |
        echo "Running isort import sorting check..."
        isort --check-only --diff backend/
        if [ $? -eq 0 ]; then
          echo "✅ isort check passed"
        else
          echo "❌ isort check failed" 
          exit 1
        fi
        
    - name: Run flake8 linting
      run: |
        echo "Running flake8 linting..."
        flake8 backend/ --count --statistics --show-source
        
    - name: Run mypy type checking
      run: |
        echo "Running mypy type checking..."
        mypy backend/ --ignore-missing-imports --no-strict-optional
        
    - name: Run pylint code analysis
      run: |
        echo "Running pylint code analysis..."
        pylint backend/ --disable=C0114,C0115,C0116 --exit-zero
      continue-on-error: true
      
    - name: Run bandit security check
      run: |
        echo "Running bandit security analysis..."
        bandit -r backend/ -f json -o bandit-report.json
        bandit -r backend/ -ll
      continue-on-error: true
      
    - name: Run safety dependency check
      run: |
        echo "Running safety dependency vulnerability check..."
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  api-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_ai_social_media
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest-asyncio
        
    - name: Set up test environment
      run: |
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_ai_social_media" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_api_tests" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "AUTH0_DOMAIN=test.auth0.com" >> $GITHUB_ENV
        echo "AUTH0_CLIENT_ID=test_client_id" >> $GITHUB_ENV
        
    - name: Start FastAPI application
      run: |
        python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        echo "✅ FastAPI application started successfully"
        
    - name: Run API endpoint tests
      run: |
        pytest backend/tests/integration/test_api_endpoints.py \
          --verbose \
          --tb=short \
          --junit-xml=api-test-results.xml
          
    - name: Test API documentation endpoint
      run: |
        curl -f http://localhost:8000/docs
        curl -f http://localhost:8000/openapi.json
        echo "✅ API documentation endpoints accessible"
        
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: api-test-results.xml
        retention-days: 30

  social-integration-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run social media integration tests (mock mode)
      run: |
        pytest backend/tests/integration/test_social_integrations.py \
          --verbose \
          --tb=short \
          --junit-xml=social-integration-results.xml
      env:
        MOCK_SOCIAL_APIS: "true"
        
    - name: Upload social integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: social-integration-results
        path: social-integration-results.xml
        retention-days: 30

  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, lint-and-format, api-tests]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Build package
      run: |
        python -m build --wheel --outdir dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 7
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        echo "✅ Package installed successfully"