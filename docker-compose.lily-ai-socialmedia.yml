# Docker Compose Configuration for Lily AI Social Media Platform
# Production deployment for www.lily-ai-socialmedia.com
# 
# Usage:
#   docker-compose -f docker-compose.lily-ai-socialmedia.yml up -d
#
# Prerequisites:
#   - SSL certificates in ./ssl/
#   - Environment file: .env.lily-ai-socialmedia.production
#   - Domain DNS configured to point to server IP

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lily-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: lily_ai_socialmedia
      POSTGRES_USER: lily_ai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./sql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - lily-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lily_ai_user -d lily_ai_socialmedia"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: lily-ai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - lily-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lily-ai-backend
    restart: unless-stopped
    env_file:
      - .env.lily-ai-socialmedia.production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://lily_ai_user:${POSTGRES_PASSWORD}@postgres:5432/lily_ai_socialmedia
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=api.lily-ai-socialmedia.com,www.lily-ai-socialmedia.com
      - CORS_ORIGINS=https://www.lily-ai-socialmedia.com
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./vector_store:/app/vector_store
    ports:
      - "8000:8000"
    networks:
      - lily-ai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Background Workers for Async Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lily-ai-worker
    restart: unless-stopped
    env_file:
      - .env.lily-ai-socialmedia.production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://lily_ai_user:${POSTGRES_PASSWORD}@postgres:5432/lily_ai_socialmedia
      - REDIS_URL=redis://redis:6379/0
    command: celery -A backend.tasks.celery_app worker --loglevel=info --concurrency=4
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./vector_store:/app/vector_store
    networks:
      - lily-ai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "backend.tasks.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 20s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Task Scheduler for Periodic Jobs
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lily-ai-scheduler
    restart: unless-stopped
    env_file:
      - .env.lily-ai-socialmedia.production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://lily_ai_user:${POSTGRES_PASSWORD}@postgres:5432/lily_ai_socialmedia
      - REDIS_URL=redis://redis:6379/0
    command: celery -A backend.tasks.celery_app beat --loglevel=info --scheduler=database
    volumes:
      - ./logs:/app/logs
    networks:
      - lily-ai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: lily-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/lily-ai-socialmedia.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/letsencrypt:ro
      - ./frontend/dist:/var/www/lily-ai-socialmedia:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - lily-ai-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring and Observability (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lily-ai-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - lily-ai-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lily-ai-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=monitoring.lily-ai-socialmedia.com
      - GF_SERVER_ROOT_URL=https://monitoring.lily-ai-socialmedia.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - lily-ai-network
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Persistent Data Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# Networks
networks:
  lily-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16